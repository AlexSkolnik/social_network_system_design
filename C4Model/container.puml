@startuml "messagebus"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")

SHOW_PERSON_OUTLINE()

title Container diagram for Social Network System

Person(user, User, "A user of Social Network")

System_Boundary(c1, "Social Network System") {
     Container(balancer, "Balancer", "Nginx, Gateway", "", $tags = "microService")
     Container(media_service, "Media service", "ASP.NET", "", $tags = "microService")
     ContainerDb(temp_image_db, "Image Database", "Blob storage", "Stores temporary images", $tags = "storage")
     ContainerDb(image_db, "Image Database", "Blob storage", "Stores images", $tags = "storage")
    
     ContainerDb(post_db, "Posts Database", "Postgres", "Stores posts", $tags = "storage")
     ContainerDb(location_db, "Locaions Database", "PostGis", "Stores locations", $tags = "storage")
     Container(post_service, "Post Service", "ASP.NET", "", $tags = "microService")
     Container(message_bus, "Message Bus", "RabbitMQ", "")
     Container(message_broker, "Message Bus", "Kafka", "")
    
     Container(user_service, "Users Service", "ASP.NET", "", $tags = "microService")
     ContainerDb(user_db, "Users Database", "Neo4j", "", $tags = "storage")
   
   
     ContainerDb(chat_db, "Chats Database", "Postgres", "Stores messages", $tags = "storage")
     Container(chat_service, "Chat Service", "ASP.NET, SignalR", "", $tags = "microService")

     ContainerDb(feed_db, "Feed Database", "Redis", "Stores feeds", $tags = "storage")
     Container(feed_service, "Feed Service", "ASP.NET", "", $tags = "microService")
}

Rel_R(user, balancer, "", "HTTPS")
Rel_R(user, chat_service, "", "WebSocket")

Rel_R(chat_service, chat_db, "", "HTTPS")

Rel_D(balancer, user_service, "", "HTTPS")
Rel_D(user_service, user_db, "", "HTTPS")
Rel_L(feed_service, user_service, "", "gRPC")

Rel_U(balancer, media_service, "", "HTTPS")
Rel_U(media_service, temp_image_db, "", "HTTPS")
Rel_U(media_service, image_db, "", "HTTPS")

Rel_R(balancer, post_service, "", "HTTPS")
Rel_R(post_service, post_db, "", "HTTPS")
Rel_R(post_service, location_db, "", "HTTPS")

Rel_U(post_service, message_bus, "", "AMQP")
Rel_R(media_service, message_bus, "", "AMQP")

Rel_D(balancer, feed_service, "", "HTTPS")
Rel_D(feed_service, feed_db, "", "HTTPS")
Rel_R(feed_service, post_service, "", "gRPC")
Rel_D(post_service, message_broker, "", "TCP")
Rel_L(feed_service, message_broker, "", "TCP")
Rel(user_service, message_broker, "", "TCP")

SHOW_LEGEND()
@enduml